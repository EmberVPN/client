name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - master      

jobs:

  get-version:
    name: Get Latest Version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get Latest Version
        id: get_version
        run: |
          echo ::set-output name=version::$(cat package.json | jq -r '.version')

  build-win32:
    name: Build (win32)
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build:win

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: win32
          path: |
            dist/*.exe
            dist/*.msi

  build-linux:
    name: Build (linux)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build:linux

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: |
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.tar.gz
            dist/*.zip

  build-macos:
    name: Build (macos)
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci
        
      - name: Build
        run: npm run build:mac

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: darwin
          path: |
            dist/*.dmg

  release:
    name: Release (all)
    runs-on: ubuntu-latest
    needs: [ build-win32, build-macos, build-linux ]
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Download (win32)
        uses: actions/download-artifact@v3
        with:
          name: win32
          path: win32/

      - name: Download (linux)
        uses: actions/download-artifact@v3
        with:
          name: linux
          path: linux/

      - name: Download (macos)
        uses: actions/download-artifact@v3
        with:
          name: darwin
          path: darwin/
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            win32/*
            linux/*
            darwin/*


